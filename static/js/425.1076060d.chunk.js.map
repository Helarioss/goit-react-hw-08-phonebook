{"version":3,"file":"static/js/425.1076060d.chunk.js","mappings":"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","sources":["components/ContactForm/ContactForm.jsx","components/ContactItem/ContactItem.jsx","components/ContactList/ContactList.jsx","components/Filter/Filter.jsx","pages/Contacts/Contacts.styled.js","pages/Contacts/Contacts.jsx"],"sourcesContent":["import { toast } from 'react-toastify';\nimport { useFormik } from 'formik';\nimport * as Yup from 'yup';\nimport {\n  useAddContactMutation,\n  useGetContactsQuery,\n} from 'services/contactsApi';\nimport { Box, Button, TextField } from '@mui/material';\n\nconst ContactForm = () => {\n  const { data: contacts } = useGetContactsQuery();\n  const [addContact, { isLoading }] = useAddContactMutation();\n\n  const onSubmit = async data => {\n    try {\n      if (\n        contacts.find(\n          contact =>\n            contact.name.toLocaleLowerCase() ===\n            formik.values.name.toLocaleLowerCase()\n        )\n      )\n        throw new Error(`${formik.values.name} is already in contacts`);\n\n      const result = await addContact(data);\n\n      if (result.error) throw new Error('Failed to add contact');\n\n      toast.success('Contact added successfully');\n      formik.handleReset();\n    } catch (error) {\n      toast.error(error.message);\n    }\n  };\n\n  const numberRegex = new RegExp(\n    '\\\\+?\\\\d{1,4}?[-.\\\\s]?\\\\(?\\\\d{1,3}?\\\\)?[-.\\\\s]?\\\\d{1,4}[-.\\\\s]?\\\\d{1,4}[-.\\\\s]?\\\\d{1,9}'\n  );\n\n  const formik = useFormik({\n    initialValues: {\n      name: '',\n      number: '',\n    },\n    validationSchema: Yup.object({\n      name: Yup.string()\n        .matches(\n          \"^[a-zA-Zа-яА-Я]+(([' -][a-zA-Zа-яА-Я ])?[a-zA-Zа-яА-Я]*)*$\",\n          \"Name may contain only letters, apostrophe, dash and spaces. For example Adrian, Jacob Mercer, Charles de Batz de Castelmore d'Artagnan\"\n        )\n\n        .required('Required'),\n      number: Yup.string()\n        .matches(\n          numberRegex,\n          'Phone number must be digits and can contain spaces, dashes, parentheses and can start with +'\n        )\n        .max(13)\n        .required('Required'),\n    }),\n    onSubmit,\n  });\n\n  return (\n    <Box\n      component=\"form\"\n      onSubmit={formik.handleSubmit}\n      sx={{\n        mt: 1,\n        display: 'flex',\n        flexDirection: 'column',\n        alignItems: 'center',\n      }}\n    >\n      <TextField\n        margin=\"normal\"\n        required\n        fullWidth\n        id=\"name\"\n        label=\"Name\"\n        name=\"name\"\n        value={formik.values.name}\n        onChange={formik.handleChange}\n        onBlur={formik.handleBlur}\n        error={Boolean(formik.touched.name && formik.errors.name)}\n        helperText={formik.touched.name && formik.errors.name}\n      />\n      <TextField\n        margin=\"normal\"\n        required\n        fullWidth\n        name=\"number\"\n        label=\"Number\"\n        type=\"tel\"\n        id=\"number\"\n        value={formik.values.number}\n        onChange={formik.handleChange}\n        onBlur={formik.handleBlur}\n        error={Boolean(formik.touched.number && formik.errors.number)}\n        helperText={formik.touched.number && formik.errors.number}\n      />\n      <Button\n        type=\"submit\"\n        variant=\"contained\"\n        sx={{ mt: 3, mb: 2, textAlign: 'center' }}\n        disabled={isLoading}\n      >\n        Add contact\n      </Button>\n    </Box>\n  );\n};\n\nexport default ContactForm;\n","import { IconButton, ListItem, ListItemText } from '@mui/material';\nimport { toast } from 'react-toastify';\nimport PropTypes from 'prop-types';\nimport { useEffect } from 'react';\nimport { useDeleteContactMutation } from 'services/contactsApi';\nimport DeleteIcon from '@mui/icons-material/Delete';\n\nconst ContactItem = ({ id, name, number }) => {\n  const [deleteContact, { isLoading, isSuccess }] = useDeleteContactMutation();\n\n  useEffect(() => {\n    if (isSuccess) toast.success('The contact was successfully deleted');\n  }, [isSuccess]);\n\n  return (\n    <ListItem\n      secondaryAction={\n        <>\n          <IconButton\n            edge=\"end\"\n            aria-label=\"delete\"\n            disabled={isLoading}\n            onClick={() => deleteContact(id)}\n          >\n            <DeleteIcon />\n          </IconButton>\n        </>\n      }\n    >\n      <ListItemText primary={name} secondary={number} />\n    </ListItem>\n  );\n};\n\nContactItem.propTypes = {\n  id: PropTypes.string.isRequired,\n  name: PropTypes.string.isRequired,\n  number: PropTypes.string.isRequired,\n};\n\nexport default ContactItem;\n","import { createSelector } from '@reduxjs/toolkit';\nimport { useMemo } from 'react';\nimport { useSelector } from 'react-redux';\nimport { useGetContactsQuery } from 'services/contactsApi';\nimport { getFilter } from 'redux/contacts/filterSlice';\nimport ContactItem from 'components/ContactItem';\nimport { List } from '@mui/material';\nimport { Spinner } from 'components/Spinner';\n\nconst useContacts = () => {\n  const filter = useSelector(getFilter);\n\n  const selectFilteredContacts = useMemo(() => {\n    return createSelector(\n      [res => res.data, (_, filter) => filter],\n      (data, filter) =>\n        data\n          ?.filter(({ name }) =>\n            name.toLowerCase().includes(filter.toLowerCase())\n          )\n          .reverse() ?? []\n    );\n  }, []);\n\n  return useGetContactsQuery(undefined, {\n    selectFromResult: result => ({\n      ...result,\n      filteredContacts: selectFilteredContacts(result, filter),\n    }),\n  });\n};\n\nconst ContactList = () => {\n  const { data, filteredContacts, error, isLoading } = useContacts();\n\n  if (isLoading) return <Spinner height={120} width={120} />;\n\n  if (error) return <p>Failed to load contacts</p>;\n\n  if (data?.length === 0) return <p>No contacts</p>;\n\n  return (\n    <List\n      sx={{\n        overflow: 'auto',\n        maxHeight: 350,\n      }}\n    >\n      {filteredContacts?.map(contact => (\n        <ContactItem key={contact.id} {...contact} />\n      ))}\n    </List>\n  );\n};\n\nexport default ContactList;\n","import { TextField } from '@mui/material';\nimport { useDispatch, useSelector } from 'react-redux';\nimport { getFilter, updateFilter } from 'redux/contacts/filterSlice';\n\nconst Filter = () => {\n  const value = useSelector(getFilter);\n  const dispatch = useDispatch();\n\n  const onFilterChange = event => {\n    dispatch(updateFilter(event.target.value));\n  };\n\n  return (\n    <TextField\n      fullWidth\n      id=\"standard-search\"\n      label=\"Search\"\n      type=\"search\"\n      variant=\"standard\"\n      name=\"filter\"\n      pattern=\"^[a-zA-Zа-яА-Я]+(([' -][a-zA-Zа-яА-Я ])?[a-zA-Zа-яА-Я]*)*$\"\n      title=\"Name may contain only letters, apostrophe, dash and spaces. For example Adrian, Jacob Mercer, Charles de Batz de Castelmore d'Artagnan\"\n      value={value}\n      onChange={onFilterChange}\n    />\n  );\n};\n\nexport default Filter;\n","import styled from 'styled-components';\n\nexport const Container = styled.div`\n  display: grid;\n  grid-template-columns: 1fr 1fr;\n`;\n\nexport const Title = styled.h1`\n  text-align: center;\n  margin-top: 30px;\n`;\n\nexport const TitleForm = styled.h2`\n  margin: 25px 0;\n`;\n","import { Grid } from '@mui/material';\nimport ContactForm from 'components/ContactForm';\nimport ContactList from 'components/ContactList';\nimport Filter from 'components/Filter';\nimport { Title, TitleForm } from './Contacts.styled';\n\nconst Contacts = () => {\n  return (\n    <div>\n      <Title>Phonebook</Title>\n\n      <Grid\n        container\n        direction=\"row\"\n        justifyContent=\"center\"\n        alignItems=\"flex-start\"\n        columnSpacing={12}\n      >\n        <Grid item xs={3}>\n          <TitleForm>Create contact</TitleForm>\n          <ContactForm />\n        </Grid>\n\n        <Grid item xs={3}>\n          <TitleForm>Contacts</TitleForm>\n          <Filter />\n          <ContactList />\n        </Grid>\n      </Grid>\n    </div>\n  );\n};\n\nexport default Contacts;\n"],"names":["contacts","useGetContactsQuery","data","useAddContactMutation","addContact","isLoading","onSubmit","find","contact","name","toLocaleLowerCase","formik","values","Error","error","toast","handleReset","message","numberRegex","RegExp","useFormik","initialValues","number","validationSchema","Yup","matches","required","max","Box","component","handleSubmit","sx","mt","display","flexDirection","alignItems","TextField","margin","fullWidth","id","label","value","onChange","handleChange","onBlur","handleBlur","Boolean","touched","errors","helperText","type","Button","variant","mb","textAlign","disabled","useDeleteContactMutation","deleteContact","isSuccess","useEffect","ListItem","secondaryAction","IconButton","edge","onClick","Delete","ListItemText","primary","secondary","filter","useSelector","getFilter","selectFilteredContacts","useMemo","createSelector","res","_","toLowerCase","includes","reverse","undefined","selectFromResult","result","filteredContacts","useContacts","Spinner","height","width","length","List","overflow","maxHeight","map","dispatch","useDispatch","pattern","title","event","updateFilter","target","Title","styled","TitleForm","Grid","container","direction","justifyContent","columnSpacing","item","xs"],"sourceRoot":""}